/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PointsImport } from './routes/points'
import { Route as InvestmentsImport } from './routes/investments'
import { Route as GoalsImport } from './routes/goals'
import { Route as DiscountsImport } from './routes/discounts'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'

// Create/Update Routes

const PointsRoute = PointsImport.update({
  id: '/points',
  path: '/points',
  getParentRoute: () => rootRoute,
} as any)

const InvestmentsRoute = InvestmentsImport.update({
  id: '/investments',
  path: '/investments',
  getParentRoute: () => rootRoute,
} as any)

const GoalsRoute = GoalsImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRoute,
} as any)

const DiscountsRoute = DiscountsImport.update({
  id: '/discounts',
  path: '/discounts',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/discounts': {
      id: '/discounts'
      path: '/discounts'
      fullPath: '/discounts'
      preLoaderRoute: typeof DiscountsImport
      parentRoute: typeof rootRoute
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsImport
      parentRoute: typeof rootRoute
    }
    '/investments': {
      id: '/investments'
      path: '/investments'
      fullPath: '/investments'
      preLoaderRoute: typeof InvestmentsImport
      parentRoute: typeof rootRoute
    }
    '/points': {
      id: '/points'
      path: '/points'
      fullPath: '/points'
      preLoaderRoute: typeof PointsImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRoute
  '/discounts': typeof DiscountsRoute
  '/goals': typeof GoalsRoute
  '/investments': typeof InvestmentsRoute
  '/points': typeof PointsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRoute
  '/discounts': typeof DiscountsRoute
  '/goals': typeof GoalsRoute
  '/investments': typeof InvestmentsRoute
  '/points': typeof PointsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/analytics': typeof AnalyticsRoute
  '/discounts': typeof DiscountsRoute
  '/goals': typeof GoalsRoute
  '/investments': typeof InvestmentsRoute
  '/points': typeof PointsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analytics'
    | '/discounts'
    | '/goals'
    | '/investments'
    | '/points'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analytics'
    | '/discounts'
    | '/goals'
    | '/investments'
    | '/points'
    | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/analytics'
    | '/discounts'
    | '/goals'
    | '/investments'
    | '/points'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnalyticsRoute: typeof AnalyticsRoute
  DiscountsRoute: typeof DiscountsRoute
  GoalsRoute: typeof GoalsRoute
  InvestmentsRoute: typeof InvestmentsRoute
  PointsRoute: typeof PointsRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnalyticsRoute: AnalyticsRoute,
  DiscountsRoute: DiscountsRoute,
  GoalsRoute: GoalsRoute,
  InvestmentsRoute: InvestmentsRoute,
  PointsRoute: PointsRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/analytics",
        "/discounts",
        "/goals",
        "/investments",
        "/points",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/analytics": {
      "filePath": "analytics.tsx"
    },
    "/discounts": {
      "filePath": "discounts.tsx"
    },
    "/goals": {
      "filePath": "goals.tsx"
    },
    "/investments": {
      "filePath": "investments.tsx"
    },
    "/points": {
      "filePath": "points.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
